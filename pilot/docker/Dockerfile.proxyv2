# BASE_DISTRIBUTION is used to switch between the old base distribution and distroless base images
ARG BASE_DISTRIBUTION=debug

# Version is the base image version from the TLD Makefile
ARG BASE_VERSION=latest
ARG ISTIO_BASE_REGISTRY=gcr.io/istio-release

# The following section is used as base image if BASE_DISTRIBUTION=debug
FROM ${ISTIO_BASE_REGISTRY}/base:${BASE_VERSION} as debug

# The following section is used as base image if BASE_DISTRIBUTION=distroless
# This image is a custom built debian11 distroless image with multiarchitecture support.
# It is built on the base distroless image, with iptables binary and libraries added
# The source can be found at https://github.com/istio/distroless/tree/iptables
# This version is from commit 86c4972a9f5f245cfb382c8e1e95f176d968c882.
FROM ${ISTIO_BASE_REGISTRY}/iptables@sha256:616f60fbdee8c9d32a9e0ec24ff1549f6c9d7b2dc2a96b5a1f2ccbbc298a31ea as distroless

# This will build the final image based on either debug or distroless from above
# hadolint ignore=DL3006
FROM ${BASE_DISTRIBUTION:-debug}

WORKDIR /

ARG proxy_version
ARG SIDECAR=envoy
ARG SIDECAR_LIBRARY=libbssl-compat.so

# Copy Envoy bootstrap templates used by pilot-agent
COPY envoy_bootstrap.json /var/lib/istio/envoy/envoy_bootstrap_tmpl.json
COPY gcp_envoy_bootstrap.json /var/lib/istio/envoy/gcp_envoy_bootstrap_tmpl.json

# Install the missing Kitware public key
RUN apt update && apt install -y wget gpg strace libc6-dbg tshark
RUN wget -qO- https://apt.kitware.com/keys/kitware-archive-latest.asc | gpg --dearmor - > /usr/share/keyrings/kitware-archive-keyring.gpg
RUN sed -i "s|^deb.*kitware.*$|deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ \$(lsb_release -cs) main|g" /etc/apt/sources.list

# Apt update && Install essential packages
RUN apt update && apt install -y build-essential checkinstall zlib1g-dev cmake

# Install OpenSSL 3.2.0
ENV OPENSSL_VERSION=3.2.0 \
    OPENSSL_ROOTDIR=/usr/local/openssl-3.2.0

RUN wget -qO- https://github.com/openssl/openssl/releases/download/openssl-3.2.0/openssl-3.2.0.tar.gz | tar xz -C / && \
    cd /openssl-3.2.0 && \
    ./config --prefix=$OPENSSL_ROOTDIR \
        --openssldir=$OPENSSL_ROOTDIR \
        --libdir=lib64 \
        shared \
        -Wl,-rpath,${OPENSSL_ROOTDIR}/lib64 && \
    sed -i 's/^OPENSSL_EXPORT_VAR_AS_FUNCTION=.*/OPENSSL_EXPORT_VAR_AS_FUNCTION=/' Makefile && \
    make clean && \
    make depend && \
    make -j$(nproc) && \
    make install_sw install_ssldirs

ENV LD_LIBRARY_PATH=$OPENSSL_ROOTDIR/lib64:$LD_LIBRARY_PATH

# Set symbolic link
RUN cd $OPENSSL_ROOTDIR/lib64 && \
    ln -sf libcrypto.so.3 libcrypto.so && \
    ln -sf libssl.so.3 libssl.so

# Set OpenSSL configuration
RUN echo "openssl_conf = openssl_init" > $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "[openssl_init]" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "providers = provider_sect" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "ssl_conf = ssl_sect" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "[provider_sect]" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "default = default_sect" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "legacy = legacy_sect" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "[default_sect]" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "activate = 1" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "[legacy_sect]" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "activate = 1" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "[ssl_sect]" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "system_default = system_default_sect" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "[system_default_sect]" >> $OPENSSL_ROOTDIR/openssl.cnf && \
    echo "CipherString = DEFAULT:@SECLEVEL=1" >> $OPENSSL_ROOTDIR/openssl.cnf

# Set environment variables for OpenSSL
ENV OPENSSL_MODULES=$OPENSSL_ROOTDIR/lib64/ossl-modules
ENV OPENSSL_CONF=$OPENSSL_ROOTDIR/openssl.cnf
ENV OPENSSL_PROVIDERS=$OPENSSL_ROOTDIR/lib64/ossl-modules

# Install BSSL compatibility library
ARG BSSL_COMPAT_ROOT=/usr/local/bssl-compat
RUN mkdir -p ${BSSL_COMPAT_ROOT}/lib64

# Copy Envoy
COPY envoy /usr/local/bin/${SIDECAR}

# Copy library
COPY lib/libbssl-compat.so ${BSSL_COMPAT_ROOT}/lib64/
COPY lib/b_libssl.so ${BSSL_COMPAT_ROOT}/lib64/
COPY lib/b_libcrypto.so ${BSSL_COMPAT_ROOT}/lib64/

# Add permission
RUN chmod +x /usr/local/bin/${SIDECAR}

RUN chmod +x ${BSSL_COMPAT_ROOT}/lib64/${SIDECAR_LIBRARY}

RUN chmod +x ${BSSL_COMPAT_ROOT}/lib64/b_libssl.so && \
    chmod +x ${BSSL_COMPAT_ROOT}/lib64/b_libcrypto.so

# Update library path
RUN echo "${BSSL_COMPAT_ROOT}/lib64" >> /etc/ld.so.conf.d/bssl-compat.conf && \
    echo "${OPENSSL_ROOTDIR}/lib64" >> /etc/ld.so.conf.d/bssl-compat.conf && \
    echo "${OPENSSL_ROOTDIR}/lib64/ossl-modules" >> /etc/ld.so.conf.d/bssl-compat.conf && \
    echo "${OPENSSL_ROOTDIR}" >> /etc/ld.so.conf.d/bssl-compat.conf && \
    ldconfig && \
    echo "OPENSSL_CONF=${OPENSSL_CONF}" && \
    echo "OPENSSL_MODULES=${OPENSSL_MODULES}"

# Update environment variables
ENV LD_LIBRARY_PATH=${BSSL_COMPAT_ROOT}/lib64:$LD_LIBRARY_PATH

# Environment variable indicating the exact proxy sha - for debugging or version-specific configs
ENV ISTIO_META_ISTIO_PROXY_SHA $proxy_version

ARG TARGETARCH
COPY ${TARGETARCH:-amd64}/pilot-agent /usr/local/bin/pilot-agent

FROM golang:1.19 as builder

RUN mkdir /app
WORKDIR /app
COPY main.go ./
RUN CGO_ENABLED=1 GOOS=linux go build -o crypto-provider main.go

FROM ${BASE_DISTRIBUTION:-debug}

COPY --from=builder /app/crypto-provider /app/crypto-provider

RUN chmod +x /app/crypto-provider

# The pilot-agent will bootstrap Envoy.
ENTRYPOINT ["/app/crypto-provider"]