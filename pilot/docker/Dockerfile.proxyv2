# BASE_DISTRIBUTION is used to switch between the old base distribution and distroless base images
ARG BASE_DISTRIBUTION=debug

# Version is the base image version from the TLD Makefile
ARG BASE_VERSION=latest
ARG ISTIO_BASE_REGISTRY=gcr.io/istio-release

# The following section is used as base image if BASE_DISTRIBUTION=debug
FROM ${ISTIO_BASE_REGISTRY}/base:${BASE_VERSION} as debug

# The following section is used as base image if BASE_DISTRIBUTION=distroless
# This image is a custom built debian11 distroless image with multiarchitecture support.
# It is built on the base distroless image, with iptables binary and libraries added
# The source can be found at https://github.com/istio/distroless/tree/iptables
# This version is from commit 86c4972a9f5f245cfb382c8e1e95f176d968c882.
FROM ${ISTIO_BASE_REGISTRY}/iptables@sha256:616f60fbdee8c9d32a9e0ec24ff1549f6c9d7b2dc2a96b5a1f2ccbbc298a31ea as distroless

# This will build the final image based on either debug or distroless from above
# hadolint ignore=DL3006
FROM ${BASE_DISTRIBUTION:-debug}

WORKDIR /

ARG proxy_version
ARG SIDECAR=envoy
ARG SIDECAR_LIBRARY=libbssl-compat.so

# Copy Envoy bootstrap templates used by pilot-agent
COPY envoy_bootstrap.json /var/lib/istio/envoy/envoy_bootstrap_tmpl.json
COPY gcp_envoy_bootstrap.json /var/lib/istio/envoy/gcp_envoy_bootstrap_tmpl.json

# Install the missing Kitware public key
RUN apt update && apt install -y wget gpg
RUN wget -qO- https://apt.kitware.com/keys/kitware-archive-latest.asc | gpg --dearmor - > /usr/share/keyrings/kitware-archive-keyring.gpg
RUN sed -i "s|^deb.*kitware.*$|deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ \$(lsb_release -cs) main|g" /etc/apt/sources.list

# Apt update && Install essential packages
# RUN apt update && apt install -y build-essential checkinstall zlib1g-dev cmake

# # Install OpenSSL 3.2.0
# ENV OPENSSL_VERSION=3.2.0 \
#     OPENSSL_ROOTDIR=/usr/local/openssl-3.2.0
# RUN wget -qO- https://github.com/openssl/openssl/releases/download/openssl-3.2.0/openssl-3.2.0.tar.gz | tar xz -C / && \
#     cd /openssl-3.2.0 && \
#     ./config -d --prefix=$OPENSSL_ROOTDIR --openssldir=$OPENSSL_ROOTDIR --libdir=lib64 shared enable-fips -Wl,-rpath,${OPENSSL_ROOTDIR}/lib64 && \
#     make -j && make install_sw install_ssldirs && \
#     echo $OPENSSL_ROOTDIR/lib64 > /etc/ld.so.conf.d/openssl-3.2.0.conf && \
#     ldconfig && \
#     mv /usr/bin/openssl /usr/bin/openssl.backup && \ 
#     ln -sf $OPENSSL_ROOTDIR/bin/openssl /usr/bin/openssl


# ENV LD_LIBRARY_PATH=$OPENSSL_ROOTDIR/lib64:$LD_LIBRARY_PATH

# Set symbolic link
# RUN cd $OPENSSL_ROOTDIR/lib64 && \
#     ln -sf libcrypto.so.3 libcrypto.so && \
#     ln -sf libssl.so.3 libssl.so

# # Install libOQS
# RUN cd / && \
#     wget --no-check-certificate https://github.com/open-quantum-safe/liboqs/archive/refs/tags/0.11.0.tar.gz && \
#     tar xzf 0.11.0.tar.gz && \
#     rm 0.11.0.tar.gz && \
#     cd /liboqs-0.11.0 && \
#     mkdir build && \
#     cd build && \
#     cmake \
#         -DCMAKE_INSTALL_PREFIX=$OPENSSL_ROOTDIR \
#         -DBUILD_SHARED_LIBS=ON \
#         -DOQS_USE_OPENSSL=OFF \
#         -DCMAKE_BUILD_TYPE=Release \
#         -DOQS_BUILD_ONLY_LIB=ON \
#         -DOQS_DIST_BUILD=ON \
#         -DCMAKE_INSTALL_LIBDIR=lib64 \
#         .. && \
#     make -j && make install

# # Install oqsprovider
# RUN wget --no-check-certificate https://github.com/open-quantum-safe/oqs-provider/archive/refs/tags/0.7.0.tar.gz && \
#     tar xzf 0.7.0.tar.gz && \
#     rm 0.7.0.tar.gz && \
#     cd /oqs-provider-0.7.0 && \
#     mkdir build && \
#     cd build && \
#     cmake -DOPENSSL_ROOT_DIR=$OPENSSL_ROOTDIR \
#         -DCMAKE_PREFIX_PATH=$OPENSSL_ROOTDIR \
#         -Dliboqs_DIR=$OPENSSL_ROOTDIR/lib64/cmake/liboqs \
#         .. && \
#     make -j && make install && \
#     sed -i "s/default = default_sect/default = default_sect\noqsprovider = oqsprovider_sect/g" $OPENSSL_ROOTDIR/openssl.cnf && \
#     sed -i "s/\[default_sect\]/\[default_sect\]\nactivate = 1\n\[oqsprovider_sect\]\nactivate = 1\n/g" $OPENSSL_ROOTDIR/openssl.cnf

# Set OpenSSL conf
# RUN sed -i '/providers = provider_sect/a ssl_conf = ssl_sect' $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "[provider_sect]" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "default = default_sect" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "base = base_sect" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "[default_sect]" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "activate = 1" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "[base_sect]" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "activate = 1" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "[ssl_sect]" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "system_default = system_default_sect" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "[system_default_sect]" >> $OPENSSL_ROOTDIR/openssl.cnf && \
#     echo "CipherString = DEFAULT:@SECLEVEL=2" >> $OPENSSL_ROOTDIR/openssl.cnf

ENV OPENSSL_DEBUG=2
ENV OPENSSL_MODULES=$OPENSSL_ROOTDIR/lib64/ossl-modules
ENV OPENSSL_CONF=$OPENSSL_ROOTDIR/openssl.cnf

ARG BSSL_COMPAT_ROOT=/usr/local/bssl-compat
RUN mkdir -p ${BSSL_COMPAT_ROOT}/lib64

# Copy Envoy
COPY envoy /usr/local/bin/${SIDECAR}

## @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
# Copy library
COPY libcrypto.so ${BSSL_COMPAT_ROOT}/lib64/
COPY libssl.so ${BSSL_COMPAT_ROOT}/lib64/
## @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

# Add permission
RUN chmod +x /usr/local/bin/${SIDECAR} && \
    chmod +x ${BSSL_COMPAT_ROOT}/lib64/libcrypto.so && \
    chmod +x ${BSSL_COMPAT_ROOT}/lib64/libssl.so 

# # Update library path
# RUN echo "${BSSL_COMPAT_ROOT}/lib64" >> /etc/ld.so.conf.d/bssl-compat.conf && \
#     echo "/usr/local/openssl-3.2.0/lib64" >> /etc/ld.so.conf.d/bssl-compat.conf && \
#     echo "/usr/local/openssl-3.2.0/lib64/ossl-modules" >> /etc/ld.so.conf.d/bssl-compat.conf && \
#     ldconfig
    

# Update environment variables
ENV LD_LIBRARY_PATH=${BSSL_COMPAT_ROOT}/lib64:$LD_LIBRARY_PATH

# Environment variable indicating the exact proxy sha - for debugging or version-specific configs
ENV ISTIO_META_ISTIO_PROXY_SHA $proxy_version

ARG TARGETARCH
COPY ${TARGETARCH:-amd64}/pilot-agent /usr/local/bin/pilot-agent

# The pilot-agent will bootstrap Envoy.
ENTRYPOINT ["/usr/local/bin/pilot-agent"]